// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SignatureWatch.Infrastructure.Persistence.Contexts;

#nullable disable

namespace SignatureWatch.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221021065600_nullFix")]
    partial class nullFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SignatureWatch.Domain.Entities.AccordanceSertificate", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FormularGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ProlongDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("FormularGuid");

                    b.ToTable("AccordanceSertificates");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Guid");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Distribution", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrgRegNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SoftwareGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("SoftwareGuid")
                        .IsUnique();

                    b.ToTable("Distributions");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployeeStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Formular", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DistributionGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrgRegNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProtectionKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("DistributionGuid")
                        .IsUnique();

                    b.ToTable("Formulars");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Signature", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OwnerGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PrivateKeyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PrivateKeyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PublicKeyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PublicKeyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SignatureType")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("OwnerGuid");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Software", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SoftwareTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("SoftwareTypeGuid");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.SoftwareLicense", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ContractGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SoftwareGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ContractGuid");

                    b.HasIndex("SoftwareGuid");

                    b.HasIndex("SupportGuid");

                    b.ToTable("SoftwareLicenses");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.SoftwareType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SoftwareLocation")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("SoftwareTypes");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Support", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.AccordanceSertificate", b =>
                {
                    b.HasOne("SignatureWatch.Domain.Entities.Formular", "Formular")
                        .WithMany("AccordanceSertificates")
                        .HasForeignKey("FormularGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Formular");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Distribution", b =>
                {
                    b.HasOne("SignatureWatch.Domain.Entities.Software", "Software")
                        .WithOne("Distribution")
                        .HasForeignKey("SignatureWatch.Domain.Entities.Distribution", "SoftwareGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Software");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Formular", b =>
                {
                    b.HasOne("SignatureWatch.Domain.Entities.Distribution", "Distribution")
                        .WithOne("Formular")
                        .HasForeignKey("SignatureWatch.Domain.Entities.Formular", "DistributionGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Distribution");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Signature", b =>
                {
                    b.HasOne("SignatureWatch.Domain.Entities.Employee", "Owner")
                        .WithMany("Signatures")
                        .HasForeignKey("OwnerGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Software", b =>
                {
                    b.HasOne("SignatureWatch.Domain.Entities.SoftwareType", "SoftwareType")
                        .WithMany("Softwares")
                        .HasForeignKey("SoftwareTypeGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SoftwareType");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.SoftwareLicense", b =>
                {
                    b.HasOne("SignatureWatch.Domain.Entities.Contract", "Contract")
                        .WithMany("SoftwareLicenses")
                        .HasForeignKey("ContractGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SignatureWatch.Domain.Entities.Software", "Software")
                        .WithMany("SoftwareLicenses")
                        .HasForeignKey("SoftwareGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SignatureWatch.Domain.Entities.Support", "Support")
                        .WithMany("SoftwareLicenses")
                        .HasForeignKey("SupportGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Contract");

                    b.Navigation("Software");

                    b.Navigation("Support");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Contract", b =>
                {
                    b.Navigation("SoftwareLicenses");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Distribution", b =>
                {
                    b.Navigation("Formular");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Formular", b =>
                {
                    b.Navigation("AccordanceSertificates");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Software", b =>
                {
                    b.Navigation("Distribution");

                    b.Navigation("SoftwareLicenses");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.SoftwareType", b =>
                {
                    b.Navigation("Softwares");
                });

            modelBuilder.Entity("SignatureWatch.Domain.Entities.Support", b =>
                {
                    b.Navigation("SoftwareLicenses");
                });
#pragma warning restore 612, 618
        }
    }
}
